services:
  # PostgreSQL Database for metadata and conversation history
  postgres:
    image: postgres:15-alpine
    container_name: gukas-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gukas_memory}
      POSTGRES_USER: ${POSTGRES_USER:-gukas_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gukas_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gukas_user} -d ${POSTGRES_DB:-gukas_memory}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Qdrant Vector Database for embeddings and semantic search
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: gukas-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: gukas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main Gukas AI Agent Application
  gukas-agent:
    build:
      context: .
      dockerfile: Dockerfile
    image: gukas-ai-agent:latest
    container_name: gukas-ai-agent
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    environment:
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_BASE_URL=${CEREBRAS_BASE_URL:-https://api.cerebras.ai/v1}
      - CEREBRAS_MODEL=${CEREBRAS_MODEL:-gpt-oss-120b}
      - DJANGO_BASE_URL=${DJANGO_BASE_URL}
      - DJANGO_API_TOKEN=${DJANGO_API_TOKEN}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Database connections
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-gukas_memory}
      - POSTGRES_USER=${POSTGRES_USER:-gukas_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gukas_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env
    volumes:
      # Mount for uploads and document storage
      - uploads_data:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gukas-agent.rule=Host(`agent.yourdomain.com`)"
      - "traefik.http.routers.gukas-agent.tls=true"
      - "traefik.http.routers.gukas-agent.tls.certresolver=letsencrypt"

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  default:
    name: gukas-network
