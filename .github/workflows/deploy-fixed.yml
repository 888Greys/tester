name: 🚀 Deploy Gukas ML Agent (Fixed)

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: brand-design-development/gukas-ml

jobs:
  debug:
    name: 🔍 Debug Environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Debug information
      run: |
        echo "=== Environment Debug ==="
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Image Name: ${{ env.IMAGE_NAME }}"
        echo "Full Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Ref: ${{ github.ref }}"
        echo "=========================="

  build:
    name: 🐳 Build and Push Image
    runs-on: ubuntu-latest
    needs: debug
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🧹 Free up disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker system prune -af
        echo "Disk space after cleanup:"
        df -h

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔍 Show metadata
      run: |
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.buildkit
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        no-cache: true

    - name: ✅ Success notification
      run: |
        echo "🎉 Successfully built and pushed image!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

  deploy:
    name: 🚀 Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🕐 Log deployment start
      run: |
        echo "🚀 Starting deployment at $(date)"
        echo "📍 Branch: ${{ github.ref }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

    - name: 🔑 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 🔍 Debug SSH Key Format
      run: |
        echo "🔍 Debugging SSH key format..."
        echo "Key length: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | wc -c)"
        echo "First 50 chars: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | head -c 50)"
        echo "Last 50 chars: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | tail -c 50)"
        echo "Line count: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | wc -l)"
        echo "Key starts with: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | head -n 1)"
        echo "Key ends with: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | tail -n 1)"

    - name: 🔍 SSH Diagnostics
      run: |
        echo "🔍 SSH Agent Status:"
        ssh-add -l || echo "No keys in agent"
        echo "🔍 Testing SSH connection:"
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 mathew@${{ secrets.SERVER_IP }} "echo 'SSH connection successful'" || echo "SSH connection failed"

    - name: 🔑 Alternative SSH Setup (if webfactory fails)
      if: failure()
      run: |
        echo "🔄 Trying alternative SSH setup..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write key to file with proper formatting
        cat > ~/.ssh/id_ed25519 << 'EOF'
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        
        # Ensure proper permissions and line endings
        chmod 600 ~/.ssh/id_ed25519
        
        # Remove any potential carriage returns or extra whitespace
        sed -i 's/\r$//' ~/.ssh/id_ed25519 2>/dev/null || true
        
        # Test the key format
        echo "🔍 Testing key format:"
        ssh-keygen -l -f ~/.ssh/id_ed25519 || echo "Key format issue detected"
        
        # Add to known hosts
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Test connection
        ssh -i ~/.ssh/id_ed25519 -o ConnectTimeout=10 -o StrictHostKeyChecking=no mathew@${{ secrets.SERVER_IP }} "echo 'Alternative SSH connection successful'" || echo "Alternative SSH also failed"
        
    - name: 📝 Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 Starting deployment of Gukas AI Agent at $(date)"
        echo "📍 Deployment ID: $(date +%Y%m%d-%H%M%S)"

        # Validate required environment variables
        echo "🔍 Validating environment variables..."
        if [ -z "$CEREBRAS_API_KEY" ] || [ -z "$DJANGO_BASE_URL" ] || [ -z "$DJANGO_API_TOKEN" ]; then
          echo "❌ Missing required environment variables at $(date)"
          exit 1
        fi
        echo "✅ Environment variables validated at $(date)"

        # Stop existing containers
        echo "🛑 Stopping existing containers at $(date)..."
        docker stop gukas-ai-agent 2>/dev/null || true
        docker rm gukas-ai-agent 2>/dev/null || true
        echo "✅ Containers stopped at $(date)"

        # Pull latest image
        echo "📥 Pulling latest image at $(date)..."
        docker pull ghcr.io/brand-design-development/gukas-ml:latest
        echo "✅ Image pulled at $(date)"

        # Start new container
        echo "🚀 Starting new container at $(date)..."
        docker run -d \
          --name gukas-ai-agent \
          -p 8001:8001 \
          -e CEREBRAS_API_KEY="${CEREBRAS_API_KEY}" \
          -e CEREBRAS_BASE_URL="https://api.cerebras.ai/v1" \
          -e CEREBRAS_MODEL="gpt-oss-120b" \
          -e DJANGO_BASE_URL="${DJANGO_BASE_URL}" \
          -e DJANGO_API_TOKEN="${DJANGO_API_TOKEN}" \
          -e DEBUG="false" \
          -e LOG_LEVEL="INFO" \
          -e HOST="0.0.0.0" \
          -e PORT="8001" \
          --restart unless-stopped \
          ghcr.io/brand-design-development/gukas-ml:latest

        echo "✅ Container started at $(date)"

        # Wait for service to start
        echo "🏥 Waiting for service to start at $(date)..."
        sleep 30

        # Health check
        echo "🔍 Running health check at $(date)..."
        for i in {1..5}; do
          echo "🔍 Health check attempt $i at $(date)"
          if curl -f http://localhost:8001/health; then
            echo "✅ Deployment successful at $(date)!"
            echo "🎉 Service is healthy and responding"
            exit 0
          fi
          echo "❌ Attempt $i failed at $(date), retrying in 10 seconds..."
          sleep 10
        done

        echo "❌ Deployment failed - health check failed after 5 attempts at $(date)"
        echo "📋 Container logs:"
        docker logs gukas-ai-agent --tail 20
        exit 1
        EOF
        
        chmod +x deploy.sh
        
    - name: 🚀 Deploy to server
      run: |
        # Set SSH connection options for stability
        SSH_OPTS="-o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ConnectTimeout=10"
        
        # Copy deployment script to server (try ssh-agent first, then fallback)
        if ssh-add -l >/dev/null 2>&1; then
          echo "📡 Using SSH agent for deployment..."
          scp $SSH_OPTS deploy.sh mathew@${{ secrets.SERVER_IP }}:~/
          SSH_CMD="ssh $SSH_OPTS mathew@${{ secrets.SERVER_IP }}"
        else
          echo "📡 Using direct SSH key for deployment..."
          scp -i ~/.ssh/id_ed25519 $SSH_OPTS deploy.sh mathew@${{ secrets.SERVER_IP }}:~/
          SSH_CMD="ssh -i ~/.ssh/id_ed25519 $SSH_OPTS mathew@${{ secrets.SERVER_IP }}"
        fi
        
        # Step 1: Login to registry and prepare environment
        echo "🔑 Step 1: Setting up environment..."
        $SSH_CMD "echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
        
        # Step 2: Stop existing containers
        echo "🛑 Step 2: Stopping existing containers..."
        $SSH_CMD "docker stop gukas-ai-agent 2>/dev/null || true; docker rm gukas-ai-agent 2>/dev/null || true"
        
        # Step 3: Pull new image (separate command to avoid timeout)
        echo "📥 Step 3: Pulling latest image..."
        $SSH_CMD "docker pull ghcr.io/brand-design-development/gukas-ml:latest"
        
        # Step 4: Start new container
        echo "🚀 Step 4: Starting new container..."
        $SSH_CMD "
          export CEREBRAS_API_KEY='${{ secrets.CEREBRAS_API_KEY }}'
          export DJANGO_BASE_URL='${{ secrets.DJANGO_BASE_URL }}'
          export DJANGO_API_TOKEN='${{ secrets.DJANGO_API_TOKEN }}'
          
          docker run -d \
            --name gukas-ai-agent \
            -p 8001:8001 \
            -e CEREBRAS_API_KEY=\"\${CEREBRAS_API_KEY}\" \
            -e CEREBRAS_BASE_URL=\"https://api.cerebras.ai/v1\" \
            -e CEREBRAS_MODEL=\"gpt-oss-120b\" \
            -e DJANGO_BASE_URL=\"\${DJANGO_BASE_URL}\" \
            -e DJANGO_API_TOKEN=\"\${DJANGO_API_TOKEN}\" \
            -e DEBUG=\"false\" \
            -e LOG_LEVEL=\"INFO\" \
            -e HOST=\"0.0.0.0\" \
            -e PORT=\"8001\" \
            --restart unless-stopped \
            ghcr.io/brand-design-development/gukas-ml:latest
        "
        
        # Step 5: Health check with retry
        echo "🏥 Step 5: Health check..."
        for i in {1..6}; do
          echo "🔍 Health check attempt $i..."
          if $SSH_CMD "curl -f http://localhost:8001/health" 2>/dev/null; then
            echo "✅ Deployment successful!"
            break
          elif [ $i -eq 6 ]; then
            echo "❌ Health check failed after 6 attempts"
            echo "📋 Container logs:"
            $SSH_CMD "docker logs gukas-ai-agent --tail 20"
            exit 1
          else
            echo "⏳ Waiting 15 seconds before retry..."
            sleep 15
          fi
        done
        
    - name: 📊 Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful to production server"
          echo "🌐 Service should be available at configured domain"
        else
          echo "❌ Deployment failed"
        fi

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up deployment artifacts..."
