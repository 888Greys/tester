name: üöÄ Deploy Gukas AI Agent

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 888greys/gukas-ai-agent

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
        
    - name: üß™ Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
        
    - name: üìä Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: üê≥ Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîë Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìù Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîë Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: üìù Create deployment files
      run: |
        # Create production docker-compose file
        cat > docker-compose.prod.yml << 'EOF'
        version: '3.8'
        
        services:
          gukas-agent:
            image: ghcr.io/888greys/gukas-ai-agent:latest
            container_name: gukas-ai-agent
            ports:
              - "8001:8001"
            environment:
              - CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY }}
              - CEREBRAS_BASE_URL=https://api.cerebras.ai/v1
              - CEREBRAS_MODEL=gpt-oss-120b
              - DJANGO_BASE_URL=${{ secrets.DJANGO_BASE_URL }}
              - DJANGO_API_TOKEN=${{ secrets.DJANGO_API_TOKEN }}
              - DEBUG=false
              - LOG_LEVEL=INFO
              - HOST=0.0.0.0
              - PORT=8001
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8001/health')"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            labels:
              - "traefik.enable=true"
              - "traefik.http.routers.gukas-agent.rule=Host(\`${{ secrets.DOMAIN_NAME }}\`)"
              - "traefik.http.routers.gukas-agent.tls=true"
              - "traefik.http.routers.gukas-agent.tls.certresolver=letsencrypt"
              - "traefik.http.services.gukas-agent.loadbalancer.server.port=8001"
        
        networks:
          default:
            name: gukas-network
            external: true
        EOF
        
        # Around line 100-130, update the deploy.sh script:
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Starting deployment of Gukas AI Agent..."

        # Stop existing container if running
        echo "üõë Stopping existing container..."
        docker stop gukas-ai-agent 2>/dev/null || true
        docker rm gukas-ai-agent 2>/dev/null || true

        # Pull latest image
        echo "üì• Pulling latest image..."
        docker pull ghcr.io/888greys/gukas-ai-agent:latest

        # Run new container
        echo "üöÄ Starting new container..."
        docker run -d \
          --name gukas-ai-agent \
          -p 8001:8001 \
          -e CEREBRAS_API_KEY="${CEREBRAS_API_KEY}" \
          -e CEREBRAS_BASE_URL="https://api.cerebras.ai/v1" \
          -e CEREBRAS_MODEL="gpt-oss-120b" \
          -e DJANGO_BASE_URL="${DJANGO_BASE_URL}" \
          -e DJANGO_API_TOKEN="${DJANGO_API_TOKEN}" \
          -e DEBUG="false" \
          -e LOG_LEVEL="INFO" \
          -e HOST="0.0.0.0" \
          -e PORT="8001" \
          --restart unless-stopped \
          ghcr.io/888greys/gukas-ai-agent:latest

        # Wait for health check
        echo "üè• Waiting for health check..."
        sleep 30

        # Verify deployment
        if curl -f http://localhost:8001/health; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed - health check failed"
          exit 1
        fi

        # Cleanup old images
        echo "üßπ Cleaning up old images..."
        docker image prune -f

        echo "üéâ Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        
    - name: üöÄ Deploy to server
      run: |
        # Copy files to server
        scp -o StrictHostKeyChecking=no docker-compose.prod.yml mathew@${{ secrets.SERVER_IP }}:~/
        scp -o StrictHostKeyChecking=no deploy.sh mathew@${{ secrets.SERVER_IP }}:~/
        
        # Execute deployment
        ssh -o StrictHostKeyChecking=no mathew@${{ secrets.SERVER_IP }} << 'EOF'
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Run deployment script
          ./deploy.sh
        EOF
        
    - name: üìä Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful to https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "‚ùå Deployment failed"
        fi